# Check-In/Check-Out App Development To-Do List

## Phase 1: Project Setup
- [x] Initialize a new project repository.
- [x] Set up the project structure with frontend and backend directories.
- [x] Install necessary dependencies for both frontend and backend.
- [x] Configure ESLint and Prettier for code formatting and linting.

### Tollgate 1: Project Initialization Complete ✓
- [x] Verify that the project structure is correctly set up.
- [x] Ensure that all dependencies are installed without errors.

Notes:
- Next.js 13+ project structure implemented
- TypeScript configuration complete
- Tailwind CSS integrated for styling
- Redux toolkit configured for state management

## Phase 2: Database Setup with Neon.tech and Prisma
- [x] Set up a Neon.tech PostgreSQL database instance.
- [x] Install Prisma ORM in the backend.
- [x] Configure Prisma schema for:
  - [x] User model with authentication fields.
  - [x] Role and Permission models for RBAC.
  - [x] CheckInOut model to record check-in/out events.
- [x] Run `prisma migrate` to create database tables.

### Tollgate 2: Database Schema Ready ✓
- [x] Test database connection and schema using Prisma Studio.
- [x] Verify that tables are correctly created in the database.

Notes:
- Prisma schema includes User, Role, Permission, and CheckInOut models
- Database relationships properly configured
- Prisma client integration complete

## Phase 3: Authentication System
- [x] Implement email-based local authentication.
- [x] Set up JWT or session-based authentication.
- [x] Create login and registration endpoints.
- [x] Secure routes using authentication middleware.

### Tollgate 3: Authentication Functional ✓
- [x] Test user registration and login flows.
- [x] Ensure that protected routes are inaccessible without authentication.

Notes:
- JWT-based authentication implemented
- Login/registration API endpoints created
- Authentication middleware with token verification
- Modal-based login UI with form validation
- Auto-focusing barcode input (2s inactivity)
- Auto-clearing input (2s inactivity)
- Improved contrast and theming

## Phase 4: Role-Based Access Control (RBAC)
- [x] Define roles (e.g., Admin, User).
- [x] Assign permissions to roles.
- [x] Implement middleware to check user roles and permissions.
- [x] Update routes to enforce RBAC.

### Tollgate 4: RBAC Implemented ✓
- [x] Test access control by role.
- [x] Verify that admins have access to admin portal features.

Notes:
- Role-based middleware implemented
- Permission-based access control
- Default user role with basic permissions
- Admin role with extended permissions

## Phase 5: Barcode Scanning Functionality
- [x] Integrate barcode scanning capability on the frontend.
- [ ] Develop endpoints to handle check-in and check-out events.
- [ ] Update the CheckInOut model accordingly.

### Tollgate 5: Barcode Scanning Working
- [ ] Test barcode scanning for check-in and check-out.
- [ ] Ensure data is correctly recorded in the database.

Notes:
- Basic barcode input UI implemented
- Password field for secure entry
- Auto-focus and clear functionality
- Submit on Enter or button click

## Phase 6: Offline Functionality with Local Storage
- [ ] Implement local storage using IndexedDB or localStorage.
- [ ] Store check-in/out events locally when offline.
- [ ] Create a sync service to upload data when back online.
- [ ] Display an offline counter indicating minutes since last sync.

### Tollgate 6: Offline Mode Operational
- [ ] Test app behavior when offline.
- [ ] Verify that data syncs correctly upon reconnecting.

## Phase 7: WebSocket Integration for Real-Time Updates
- [ ] Set up WebSocket server on the backend.
- [ ] Integrate WebSocket client on the frontend.
- [ ] Broadcast check-in/out events to connected clients.
- [ ] Update UI in real-time based on WebSocket messages.

### Tollgate 7: Real-Time Updates Functional
- [ ] Test real-time updates across multiple devices.
- [ ] Ensure that the user list updates instantly upon events.

## Phase 8: Admin Portal Development
- [x] Create admin dashboard UI.
- [ ] Implement user management features (CRUD operations).
- [ ] Add role and permission management.
- [ ] Provide views for current building population and reports.

### Tollgate 8: Admin Portal Completed
- [ ] Test all admin functionalities.
- [ ] Ensure that only admins can access the admin portal.

Notes:
- Basic checklist page implemented
- Statistics dashboard layout created
- User activity view structure in place

## Phase 9: User History and Reporting
- [ ] Develop endpoints to fetch user check-in/out history.
- [ ] Create UI components to display user activity logs.
- [ ] Implement report generation features.

### Tollgate 9: User History and Reporting Verified
- [ ] Test retrieval and display of user history.
- [ ] Verify accuracy of generated reports.

## Phase 10: Testing and Deployment
- [ ] Write unit and integration tests for critical components.
- [ ] Set up continuous integration (CI) pipeline.
- [ ] Deploy the application to a staging environment.
- [ ] Perform end-to-end testing in the staging environment.

### Tollgate 10: Application Ready for Production
- [ ] All tests pass successfully.
- [ ] Deployment scripts are configured.
- [ ] Application is stable and meets all requirements.

## Phase 11: Documentation
- [x] Finalize `docs.md` with all necessary information.
- [x] Include API documentation and usage guides.
- [ ] Prepare user manuals for end-users and administrators.

Notes:
- Authentication system documented
- API endpoints documented
- Project structure documented

## Phase 12: Production Deployment
- [ ] Deploy the application to the production environment.
- [ ] Monitor application performance and logs.
- [ ] Provide support for any post-deployment issues.
